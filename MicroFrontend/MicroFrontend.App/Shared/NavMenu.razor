@inject IMicroFrontendProvider FrontendProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">MicroFrontend.App</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>

            @if (Frontends != null)
            {
                @foreach (var frontend in Frontends)
                {
                    <NavLink class="nav-link" href="@($"/{frontend.Slug}")" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> @(frontend.Name)
                    </NavLink>
                }
            }
        </div>

    </nav>
</div>

@code {
    private IEnumerable<MicroFrontentRegistration>? Frontends { get; set; }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnParametersSetAsync()
    {
        Frontends = await FrontendProvider.GetMicroFrontendsAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
